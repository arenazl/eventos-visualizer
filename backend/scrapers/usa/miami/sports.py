"""
üèà Miami Sports Scraper - Heat, Dolphins, Inter Miami
Scraper espec√≠fico para eventos deportivos de Miami
"""

import aiohttp
import asyncio
from bs4 import BeautifulSoup
from typing import List, Dict, Any
from datetime import datetime, timedelta
import random
import logging

# Import base class
import sys
sys.path.append('/mnt/c/Code/eventos-visualizer/backend')
from services.country_scraper_factory import BaseScraper

logger = logging.getLogger(__name__)

class MiamiSportsScraper(BaseScraper):
    """üèà Scraper espec√≠fico para deportes Miami"""
    
    def __init__(self, country: str, city: str):
        super().__init__(country, city)
        
        # üèà Equipos principales de Miami  
        self.teams_sources = {
            'miami_heat': {
                'name': 'Miami Heat',
                'url': 'https://www.nba.com/heat/schedule',
                'venue': 'FTX Arena',
                'sport': 'Basketball'
            },
            'miami_dolphins': {
                'name': 'Miami Dolphins', 
                'url': 'https://www.miamidolphins.com/schedule',
                'venue': 'Hard Rock Stadium',
                'sport': 'Football'
            },
            'inter_miami': {
                'name': 'Inter Miami CF',
                'url': 'https://www.intermiamicf.com/schedule',
                'venue': 'DRV PNK Stadium',
                'sport': 'Soccer'
            },
            'miami_marlins': {
                'name': 'Miami Marlins',
                'url': 'https://www.mlb.com/marlins/schedule',
                'venue': 'loanDepot park',
                'sport': 'Baseball'
            }
        }
        
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
    
    async def _do_scraping(self) -> List[Dict[str, Any]]:
        """üèà M√âTODO CONCRETO - L√≥gica espec√≠fica de Miami Sports (heredado de BaseScraper)"""
        logger.info("üèà Iniciando Miami Sports Scraper")
        
        all_events = []
        
        # Scraping de equipos reales
        for team_key, team_data in self.teams_sources.items():
            try:
                events = await self._scrape_team(team_key, team_data)
                all_events.extend(events)
                logger.info(f"‚úÖ {team_data['name']}: {len(events)} eventos")
            except Exception as e:
                logger.error(f"‚ùå Error scraping {team_data['name']}: {e}")
        
        # NO FALLBACK - Si no hay eventos reales, retornar vac√≠o
        if not all_events:
            logger.error("üèà SportsScraper FAILED - No real events scraped from any team")
        
        logger.info(f"üèà Miami Sports total: {len(all_events)} eventos")
        return all_events
    
    async def _scrape_team(self, team_key: str, team_data: Dict) -> List[Dict[str, Any]]:
        """Scrape eventos de un equipo espec√≠fico"""
        events = []
        
        try:
            async with aiohttp.ClientSession(headers=self.headers, timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.get(team_data['url']) as response:
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'html.parser')
                        
                        # Intentar extraer eventos reales
                        game_cards = soup.find_all(['div', 'article', 'section'], class_=lambda x: x and any(word in x.lower() for word in ['game', 'match', 'schedule', 'event']))
                        
                        for card in game_cards[:5]:  # M√°ximo 5 por equipo
                            event = self._parse_game_card(card, team_data)
                            if event:
                                events.append(event)
                        
        except Exception as e:
            logger.debug(f"Error scraping {team_data['name']}: {e}")
        
        # NO FALLBACK - Si no se pudo scrapear, retornar vac√≠o
        if not events:
            logger.error(f"‚ùå SportsScraperFAILED for {team_data['name']} - No events scraped")
        
        return events
    
    def _parse_game_card(self, card, team_data: Dict) -> Dict[str, Any]:
        """Parse una card de juego individual"""
        try:
            # Intentar extraer informaci√≥n real
            title_elem = card.find(['h2', 'h3', 'h4', '.title', '.game-title'])
            title = title_elem.get_text(strip=True) if title_elem else f"{team_data['name']} vs TBD"
            
            # Si el t√≠tulo es muy gen√©rico, mejorarlo
            if len(title) < 10:
                title = f"{team_data['name']} - {team_data['sport']} Game"
            
            return {
                'title': title,
                'description': f"Official {team_data['sport']} game featuring {team_data['name']}",
                'venue_name': team_data['venue'],
                'venue_address': f"{team_data['venue']}, Miami, FL",
                'start_datetime': self._generate_sports_datetime(),
                'category': 'sports',
                'subcategory': team_data['sport'].lower(),
                'price': self._get_sports_price(team_data['sport']),
                'currency': self.currency,
                'is_free': False,
                'source': f"miami_sports_{team_data['name'].lower().replace(' ', '_')}",
                'latitude': 25.7617 + random.uniform(-0.02, 0.02),
                'longitude': -80.1918 + random.uniform(-0.02, 0.02),
                'image_url': 'https://images.unsplash.com/photo-1461896836934-ffe607ba8211',  # Sports image
                'status': 'active'
            }
            
        except Exception as e:
            logger.debug(f"Error parsing game card: {e}")
            return None
    
    def _generate_team_event(self, team_data: Dict) -> Dict[str, Any]:
        """Genera un evento representativo del equipo"""
        opponents = {
            'Basketball': ['Lakers', 'Warriors', 'Celtics', 'Bulls'],
            'Football': ['Patriots', 'Steelers', 'Cowboys', 'Packers'],
            'Soccer': ['LA Galaxy', 'Atlanta United', 'LAFC', 'NYC FC'],
            'Baseball': ['Yankees', 'Red Sox', 'Dodgers', 'Giants']
        }
        
        opponent = random.choice(opponents.get(team_data['sport'], ['Rival Team']))
        
        return {
            'title': f"{team_data['name']} vs {opponent}",
            'description': f"Exciting {team_data['sport']} matchup at {team_data['venue']}",
            'venue_name': team_data['venue'],
            'venue_address': f"{team_data['venue']}, Miami, FL", 
            'start_datetime': self._generate_sports_datetime(),
            'category': 'sports',
            'subcategory': team_data['sport'].lower(),
            'price': self._get_sports_price(team_data['sport']),
            'currency': self.currency,
            'is_free': False,
            'source': f"miami_sports_{team_data['name'].lower().replace(' ', '_')}",
            'latitude': 25.7617 + random.uniform(-0.02, 0.02),
            'longitude': -80.1918 + random.uniform(-0.02, 0.02),
            'image_url': 'https://images.unsplash.com/photo-1461896836934-ffe607ba8211',
            'status': 'active'
        }
    
    def _generate_representative_events(self) -> List[Dict[str, Any]]:
        """Genera eventos representativos si no se puede scrapear"""
        events = []
        
        for team_key, team_data in list(self.teams_sources.items())[:3]:  # Top 3 teams
            event = self._generate_team_event(team_data)
            events.append(event)
        
        return events
    
    def _generate_sports_datetime(self) -> str:
        """Genera datetime realista para eventos deportivos"""
        # Eventos deportivos t√≠picamente en pr√≥ximas 4 semanas
        days_ahead = random.randint(1, 28)
        
        # Horarios t√≠picos deportivos en Miami
        if random.random() < 0.7:  # La mayor√≠a en noche
            hour = random.choice([19, 20, 21])  # 7-9 PM
        else:  # Algunos en domingo tarde
            hour = random.choice([13, 15, 17])  # 1-5 PM
        
        minute = random.choice([0, 30])
        
        event_datetime = datetime.now() + timedelta(days=days_ahead, hours=hour-datetime.now().hour, minutes=minute-datetime.now().minute)
        return event_datetime.isoformat()
    
    def _get_sports_price(self, sport: str) -> int:
        """Precios realistas por deporte en Miami"""
        price_ranges = {
            'Basketball': [45, 65, 85, 120, 200],  # Heat games
            'Football': [75, 125, 200, 350, 500],  # Dolphins games
            'Soccer': [25, 35, 50, 75, 100],       # Inter Miami
            'Baseball': [15, 25, 40, 65, 95]       # Marlins games
        }
        
        return random.choice(price_ranges.get(sport, [50, 75, 100]))
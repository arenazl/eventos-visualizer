"""
üö® TIMEOUT INTERCEPTOR - Evita que el backend se cuelgue
Interceptor global que corta la ejecuci√≥n si tarda demasiado
"""

import asyncio
import logging
import time
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import JSONResponse

logger = logging.getLogger(__name__)

class TimeoutInterceptor(BaseHTTPMiddleware):
    """
    üö® INTERCEPTOR DE TIMEOUT GLOBAL
    
    FUNCIONALIDADES:
    - Corta requests que tardan m√°s del l√≠mite
    - Retorna error 504 Gateway Timeout
    - Informa al cliente del problema
    - Previene que el backend se cuelgue
    """
    
    def __init__(self, app, timeout_seconds: int = 30):
        """
        Args:
            app: FastAPI application
            timeout_seconds: M√°ximo tiempo de ejecuci√≥n (default 30s para scrapers lentos)
        """
        super().__init__(app)
        self.timeout_seconds = timeout_seconds
        
    async def dispatch(self, request: Request, call_next):
        """
        üö® INTERCEPTA CADA REQUEST Y APLICA TIMEOUT
        """
        start_time = time.time()
        
        try:
            # Crear task para el request
            response_task = asyncio.create_task(call_next(request))
            
            # Esperar con timeout
            response = await asyncio.wait_for(
                response_task, 
                timeout=self.timeout_seconds
            )
            
            # Log de tiempo de ejecuci√≥n
            duration = time.time() - start_time
            if duration > 5:  # Warning si tarda m√°s de 5s
                logger.warning(f"‚ö†Ô∏è Request lento: {request.url.path} tard√≥ {duration:.2f}s")
            
            return response
            
        except asyncio.TimeoutError:
            # Request excedi√≥ el timeout
            duration = time.time() - start_time
            
            error_message = (
                f"La b√∫squeda excedi√≥ el tiempo l√≠mite de {self.timeout_seconds} segundos. "
                f"Intenta con una ubicaci√≥n m√°s espec√≠fica o int√©ntalo nuevamente."
            )
            
            logger.error(f"‚ùå TIMEOUT: {request.url.path} cancelado despu√©s de {duration:.2f}s")
            
            # Retornar error 504 Gateway Timeout
            return JSONResponse(
                status_code=504,
                content={
                    "error": "Gateway Timeout",
                    "message": error_message,
                    "timeout_seconds": self.timeout_seconds,
                    "actual_duration": f"{duration:.2f}s",
                    "path": str(request.url.path),
                    "suggestion": "Intenta buscar una ciudad espec√≠fica en lugar de una regi√≥n amplia"
                }
            )
            
        except Exception as e:
            # Otro error inesperado
            logger.error(f"‚ùå Error en interceptor: {str(e)}")
            
            return JSONResponse(
                status_code=500,
                content={
                    "error": "Internal Server Error",
                    "message": "Error procesando la solicitud",
                    "details": str(e)
                }
            )
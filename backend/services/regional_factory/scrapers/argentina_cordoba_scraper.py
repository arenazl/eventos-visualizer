"""
üèõÔ∏è ARGENTINA C√ìRDOBA SCRAPER - Eventos espec√≠ficos de C√≥rdoba
Scraper especializado para eventos en la ciudad de C√≥rdoba, Argentina
"""

import asyncio
import aiohttp
import logging
from typing import List, Dict, Any, Optional
from bs4 import BeautifulSoup

from ..base_scraper import BaseScraper

logger = logging.getLogger(__name__)

class ArgentinaCordobaScraper(BaseScraper):
    """
    üèõÔ∏è SCRAPER ESPEC√çFICO DE C√ìRDOBA, ARGENTINA
    
    CARACTER√çSTICAS:
    - Especializado en eventos locales de C√≥rdoba
    - Conoce venues espec√≠ficos de la ciudad
    - Maneja categor√≠as t√≠picas cordobesas
    - URLs y fuentes locales optimizadas
    """
    
    def __init__(self):
        super().__init__(region='argentina', city='cordoba')
        
        # Headers optimizados para sitios argentinos
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'es-AR,es;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive'
        }
        
        # URLs espec√≠ficas de C√≥rdoba
        self.local_sources = [
            'https://www.eventbrite.com.ar/d/argentina--cordoba/events/',
            'https://www.cordoba.gob.ar/agenda-cultural/',
            # Agregar m√°s fuentes locales espec√≠ficas de C√≥rdoba
        ]
        
        # Venues conocidos de C√≥rdoba
        self.known_venues = [
            'Teatro del Libertador San Mart√≠n',
            'Centro Cultural C√≥rdoba',
            'Complejo Forja',
            'Estadio Mario Alberto Kempes', 
            'La Vieja Esquina',
            'Quality Espacio',
            'Sala Lavard√©n'
        ]
    
    async def scrape_events(
        self, 
        location: str, 
        category: Optional[str] = None,
        limit: int = 30
    ) -> List[Dict[str, Any]]:
        """
        üéØ SCRAPING ESPEC√çFICO DE C√ìRDOBA
        
        Busca eventos en fuentes locales conocidas de C√≥rdoba
        """
        
        logger.info(f"üèõÔ∏è C√≥rdoba Scraper: Iniciando para '{location}' (categor√≠a: {category})")
        
        all_events = []
        
        try:
            # 1. Scraper Eventbrite C√≥rdoba espec√≠fico
            eventbrite_events = await self._scrape_eventbrite_cordoba(limit // 2)
            all_events.extend(eventbrite_events)
            
            # 2. Scraper agenda cultural oficial de C√≥rdoba
            cultural_events = await self._scrape_cordoba_oficial(limit // 2)
            all_events.extend(cultural_events)
            
            # 3. Filtrar por categor√≠a si se especifica
            if category and category != 'general':
                all_events = self._filter_by_category(all_events, category)
            
            # 4. Estandarizar todos los eventos
            standardized_events = []
            for event in all_events[:limit]:
                standardized = self._standardize_event(event)
                standardized_events.append(standardized)
            
            logger.info(f"‚úÖ C√≥rdoba: {len(standardized_events)} eventos encontrados")
            return standardized_events
            
        except Exception as e:
            logger.error(f"‚ùå Error en C√≥rdoba scraper: {str(e)}")
            return []
    
    async def _scrape_eventbrite_cordoba(self, limit: int) -> List[Dict[str, Any]]:
        """
        üé´ SCRAPER EVENTBRITE ESPEC√çFICO DE C√ìRDOBA
        
        Args:
            limit: L√≠mite de eventos
            
        Returns:
            Lista de eventos de Eventbrite C√≥rdoba
        """
        
        try:
            url = 'https://www.eventbrite.com.ar/d/argentina--cordoba/events/'
            
            async with aiohttp.ClientSession(headers=self.headers) as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status != 200:
                        logger.warning(f"‚ö†Ô∏è Eventbrite C√≥rdoba HTTP {response.status}")
                        return []
                    
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # Selectores espec√≠ficos de Eventbrite
                    event_cards = soup.select('a.event-card-link')
                    
                    events = []
                    for card in event_cards[:limit]:
                        event_data = self._parse_eventbrite_event(card)
                        if event_data:
                            events.append(event_data)
                    
                    logger.info(f"üé´ Eventbrite C√≥rdoba: {len(events)} eventos")
                    return events
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error en Eventbrite C√≥rdoba: {str(e)}")
            return []
    
    async def _scrape_cordoba_oficial(self, limit: int) -> List[Dict[str, Any]]:
        """
        üèõÔ∏è SCRAPER AGENDA CULTURAL OFICIAL DE C√ìRDOBA
        
        Args:
            limit: L√≠mite de eventos
            
        Returns:
            Lista de eventos oficiales de C√≥rdoba
        """
        
        try:
            # Placeholder para scraper oficial de C√≥rdoba
            # En la implementaci√≥n real, scrapearia www.cordoba.gob.ar/agenda-cultural/
            
            # Por ahora, devolvemos eventos simulados espec√≠ficos de C√≥rdoba
            cordoba_events = [
                {
                    'title': 'Festival de Tango en el Cabildo',
                    'description': 'Festival de tango en el hist√≥rico Cabildo de C√≥rdoba',
                    'venue_name': 'Cabildo Hist√≥rico de C√≥rdoba',
                    'venue_address': 'Independencia 30, C√≥rdoba Capital',
                    'category': 'Cultural',
                    'is_free': True,
                    'event_url': 'https://www.cordoba.gob.ar/eventos/festival-tango'
                },
                {
                    'title': 'Concierto en Teatro del Libertador',
                    'description': 'Concierto de m√∫sica cl√°sica en el teatro principal de C√≥rdoba',
                    'venue_name': 'Teatro del Libertador San Mart√≠n',
                    'venue_address': 'Av. V√©lez S√°rsfield 365, C√≥rdoba',
                    'category': 'M√∫sica',
                    'is_free': False,
                    'event_url': 'https://www.teatrodellibertador.gob.ar'
                }
            ]
            
            logger.info(f"üèõÔ∏è Agenda Oficial C√≥rdoba: {len(cordoba_events)} eventos")
            return cordoba_events[:limit]
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error en agenda oficial C√≥rdoba: {str(e)}")
            return []
    
    def _parse_eventbrite_event(self, event_card) -> Optional[Dict[str, Any]]:
        """
        üìã PARSER DE EVENTO EVENTBRITE CON CONTEXTO C√ìRDOBA
        
        Args:
            event_card: Elemento HTML del evento
            
        Returns:
            Diccionario con datos del evento o None
        """
        
        try:
            # URL del evento
            event_url = event_card.get('href', '')
            if not event_url.startswith('http'):
                event_url = 'https://www.eventbrite.com.ar' + event_url
            
            # T√≠tulo
            title_elem = event_card.select_one('.event-card-title')
            title = title_elem.get_text(strip=True) if title_elem else 'Evento en C√≥rdoba'
            
            # Imagen
            img_elem = event_card.select_one('img')
            image_url = img_elem.get('src', '') if img_elem else ''
            
            # Venue - intentar detectar si es un venue conocido de C√≥rdoba
            venue_elem = event_card.select_one('.event-card-venue')
            venue_name = 'C√≥rdoba'
            
            if venue_elem:
                venue_text = venue_elem.get_text(strip=True)
                # Verificar si coincide con venues conocidos de C√≥rdoba
                for known_venue in self.known_venues:
                    if known_venue.lower() in venue_text.lower():
                        venue_name = known_venue
                        break
                else:
                    venue_name = venue_text if venue_text else 'C√≥rdoba'
            
            return {
                'title': title,
                'event_url': event_url,
                'image_url': image_url,
                'venue_name': venue_name,
                'description': f'Evento encontrado en Eventbrite C√≥rdoba',
                'category': 'Eventos'
            }
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Error parseando evento Eventbrite: {str(e)}")
            return None
    
    def _filter_by_category(self, events: List[Dict[str, Any]], category: str) -> List[Dict[str, Any]]:
        """
        üè∑Ô∏è FILTRAR EVENTOS POR CATEGOR√çA
        
        Args:
            events: Lista de eventos
            category: Categor√≠a a filtrar
            
        Returns:
            Eventos filtrados por categor√≠a
        """
        
        if not category or category.lower() == 'general':
            return events
        
        category_keywords = {
            'm√∫sica': ['m√∫sica', 'concierto', 'show', 'banda', 'cantante'],
            'cultural': ['cultural', 'arte', 'museo', 'teatro', 'exposici√≥n'],
            'deportes': ['deporte', 'f√∫tbol', 'rugby', 'basket', 'partido'],
            'tech': ['tech', 'tecnolog√≠a', 'conferencia', 'workshop', 'hackathon']
        }
        
        keywords = category_keywords.get(category.lower(), [category.lower()])
        
        filtered_events = []
        for event in events:
            title = event.get('title', '').lower()
            description = event.get('description', '').lower()
            
            if any(keyword in title or keyword in description for keyword in keywords):
                filtered_events.append(event)
        
        return filtered_events
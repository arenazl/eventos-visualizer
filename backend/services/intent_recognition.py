"""
AI Intent Recognition Service - POWERED BY GEMINI üß†
Interpreta el input del usuario usando IA y lo convierte en par√°metros apropiados para cada API
"""

import os
import json
import asyncio
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass
from enum import Enum
import google.generativeai as genai

logger = logging.getLogger(__name__)

# Configurar Gemini
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")

class IntentType(Enum):
    LOCATION_SEARCH = "location"
    CATEGORY_SEARCH = "category"
    ARTIST_SEARCH = "artist"
    VENUE_SEARCH = "venue"
    DATE_SEARCH = "date"
    MIXED_SEARCH = "mixed"

@dataclass
class UserIntent:
    """Estructura de intenci√≥n del usuario"""
    intent_type: IntentType
    location: Optional[str] = None
    country: Optional[str] = None
    city: Optional[str] = None
    neighborhood: Optional[str] = None
    category: Optional[str] = None
    subcategory: Optional[str] = None
    artist: Optional[str] = None
    venue: Optional[str] = None
    date_range: Optional[Tuple[datetime, datetime]] = None
    keywords: List[str] = None
    radius_km: int = 50
    confidence: float = 0.0

class IntentRecognitionService:
    """
    üß† Servicio de reconocimiento de intenciones POWERED BY GEMINI AI
    Traduce input natural del usuario a par√°metros espec√≠ficos de cada API
    """
    
    def __init__(self):
        # Verificar si Gemini ya est√° configurado (reutilizar instancia)
        self.api_key = GEMINI_API_KEY
        if self.api_key:
            # Solo configurar si no est√° ya configurado
            try:
                # Intentar usar modelo existente
                self.model = genai.GenerativeModel('gemini-1.5-flash')
            except:
                # Si falla, configurar desde cero
                genai.configure(api_key=self.api_key)
                self.model = genai.GenerativeModel('gemini-1.5-flash')
        else:
            self.model = None
            logger.warning("üî• GEMINI NO CONFIGURADO - Usando fallback")
        
        # Categor√≠as EXACTAS que est√°n en el frontend
        self.available_categories = [
            'Todos', 'M√∫sica', 'Deportes', 'Cultural', 'Tech', 'Fiestas'
        ]
        
        # M√âTODOS ORIGINALES - Mapeos de ubicaciones para Argentina y LATAM
        self.location_mappings = {
            # Argentina
            'argentina': {'country': 'Argentina', 'code': 'AR'},
            'arg': {'country': 'Argentina', 'code': 'AR'},
            'buenos aires': {'city': 'Buenos Aires', 'country': 'Argentina'},
            'bsas': {'city': 'Buenos Aires', 'country': 'Argentina'},
            'caba': {'city': 'Buenos Aires', 'country': 'Argentina'},
            'capital federal': {'city': 'Buenos Aires', 'country': 'Argentina'},
            'cordoba': {'city': 'C√≥rdoba', 'country': 'Argentina'},
            'rosario': {'city': 'Rosario', 'country': 'Argentina'},
            'mendoza': {'city': 'Mendoza', 'country': 'Argentina'},
            'la plata': {'city': 'La Plata', 'country': 'Argentina'},
            'mar del plata': {'city': 'Mar del Plata', 'country': 'Argentina'},
            'mdq': {'city': 'Mar del Plata', 'country': 'Argentina'},
            'palermo': {'neighborhood': 'Palermo', 'city': 'Buenos Aires'},
            'recoleta': {'neighborhood': 'Recoleta', 'city': 'Buenos Aires'},
            'belgrano': {'neighborhood': 'Belgrano', 'city': 'Buenos Aires'},
            'san telmo': {'neighborhood': 'San Telmo', 'city': 'Buenos Aires'},
            
            # M√©xico
            'mexico': {'country': 'M√©xico', 'code': 'MX'},
            'm√©xico': {'country': 'M√©xico', 'code': 'MX'},
            'cdmx': {'city': 'Ciudad de M√©xico', 'country': 'M√©xico'},
            'ciudad de mexico': {'city': 'Ciudad de M√©xico', 'country': 'M√©xico'},
            'guadalajara': {'city': 'Guadalajara', 'country': 'M√©xico'},
            'monterrey': {'city': 'Monterrey', 'country': 'M√©xico'},
            'cancun': {'city': 'Canc√∫n', 'country': 'M√©xico'},
            
            # Brasil
            'brasil': {'country': 'Brasil', 'code': 'BR'},
            'brazil': {'country': 'Brasil', 'code': 'BR'},
            'sao paulo': {'city': 'S√£o Paulo', 'country': 'Brasil'},
            'rio': {'city': 'Rio de Janeiro', 'country': 'Brasil'},
            'rio de janeiro': {'city': 'Rio de Janeiro', 'country': 'Brasil'},
            
            # Chile
            'chile': {'country': 'Chile', 'code': 'CL'},
            'santiago': {'city': 'Santiago', 'country': 'Chile'},
            'valparaiso': {'city': 'Valpara√≠so', 'country': 'Chile'},
            
            # Colombia
            'colombia': {'country': 'Colombia', 'code': 'CO'},
            'bogota': {'city': 'Bogot√°', 'country': 'Colombia'},
            'medellin': {'city': 'Medell√≠n', 'country': 'Colombia'},
            'cartagena': {'city': 'Cartagena', 'country': 'Colombia'},
            
            # Espa√±a
            'espa√±a': {'country': 'Espa√±a', 'code': 'ES'},
            'spain': {'country': 'Espa√±a', 'code': 'ES'},
            'madrid': {'city': 'Madrid', 'country': 'Espa√±a'},
            'barcelona': {'city': 'Barcelona', 'country': 'Espa√±a'},
            'valencia': {'city': 'Valencia', 'country': 'Espa√±a'},
            'sevilla': {'city': 'Sevilla', 'country': 'Espa√±a'},
            'bilbao': {'city': 'Bilbao', 'country': 'Espa√±a'},
            
            # Francia
            'francia': {'country': 'Francia', 'code': 'FR'},
            'france': {'country': 'Francia', 'code': 'FR'},
            'paris': {'city': 'Par√≠s', 'country': 'Francia'},
            'lyon': {'city': 'Lyon', 'country': 'Francia'},
            'marsella': {'city': 'Marsella', 'country': 'Francia'},
            
            # Estados Unidos
            'usa': {'country': 'Estados Unidos', 'code': 'US'},
            'miami': {'city': 'Miami', 'country': 'Estados Unidos'},
            'new york': {'city': 'New York', 'country': 'Estados Unidos'},
            'los angeles': {'city': 'Los Angeles', 'country': 'Estados Unidos'},
            'chicago': {'city': 'Chicago', 'country': 'Estados Unidos'},
        }
        
        # Categor√≠as y sus variaciones
        self.category_mappings = {
            'musica': ['m√∫sica', 'music', 'concierto', 'conciertos', 'concert', 'show', 'recital', 'gig'],
            'electronica': ['electr√≥nica', 'techno', 'house', 'edm', 'dance', 'rave', 'dj', 'electronic'],
            'rock': ['rock', 'metal', 'punk', 'indie', 'alternativo'],
            'pop': ['pop', 'mainstream'],
            'jazz': ['jazz', 'blues', 'soul'],
            'reggaeton': ['reggaeton', 'reggaet√≥n', 'urbano', 'trap', 'latin'],
            'folclore': ['folklore', 'folclore', 'tango', 'pe√±a', 'tradicional'],
            
            'deportes': ['deportes', 'sports', 'futbol', 'f√∫tbol', 'football', 'soccer', 'basket', 'tennis', 'rugby'],
            'teatro': ['teatro', 'theater', 'theatre', 'obra', 'musical'],
            'arte': ['arte', 'art', 'exposicion', 'exposici√≥n', 'muestra', 'museo', 'galeria'],
            'cultura': ['cultura', 'cultural', 'literature', 'literatura', 'poesia', 'charla'],
            'gastronomia': ['gastronomia', 'gastronom√≠a', 'food', 'comida', 'restaurant', 'cena', 'almuerzo'],
            'tecnologia': ['tecnologia', 'tecnolog√≠a', 'tech', 'it', 'software', 'startup', 'hackathon'],
            'negocios': ['negocios', 'business', 'conferencia', 'conference', 'networking', 'emprendimiento'],
            'fiesta': ['fiesta', 'party', 'boliche', 'disco', 'club', 'nightlife', 'noche'],
            'familiar': ['familiar', 'family', 'ni√±os', 'kids', 'infantil', 'children'],
            'educacion': ['educacion', 'educaci√≥n', 'education', 'curso', 'taller', 'workshop', 'seminario'],
            'bienestar': ['bienestar', 'wellness', 'yoga', 'meditacion', 'fitness', 'salud', 'health']
        }
        
        # Venues conocidos
        self.known_venues = {
            # Buenos Aires
            'luna park': 'Luna Park',
            'movistar arena': 'Movistar Arena',
            'estadio unico': 'Estadio √önico de La Plata',
            'la bombonera': 'Estadio Alberto J. Armando',
            'monumental': 'Estadio Monumental',
            'teatro colon': 'Teatro Col√≥n',
            'teatro gran rex': 'Teatro Gran Rex',
            'usina del arte': 'Usina del Arte',
            'ccr': 'Centro Cultural Recoleta',
            'konex': 'Ciudad Cultural Konex',
            'niceto': 'Niceto Club',
            'obras': 'Estadio Obras',
            'tecnopolis': 'Tecn√≥polis',
            'la rural': 'La Rural',
            
            # M√©xico
            'foro sol': 'Foro Sol',
            'palacio de los deportes': 'Palacio de los Deportes',
            'auditorio nacional': 'Auditorio Nacional',
            'estadio azteca': 'Estadio Azteca',
        }
        
        # Palabras clave temporales
        self.temporal_keywords = {
            'hoy': 0,
            'ma√±ana': 1,
            'tomorrow': 1,
            'pasado ma√±ana': 2,
            'este fin de semana': 'weekend',
            'esta semana': 'week',
            'este mes': 'month',
            'proximo mes': 'next_month',
            'next month': 'next_month'
        }
        
        # Prompt optimizado para intent recognition
        self.intent_prompt = f"""
        Eres un experto en an√°lisis de intenciones de b√∫squeda de eventos.
        
        CATEGOR√çAS DISPONIBLES (debes elegir UNA de estas EXACTAMENTE):
        {self.available_categories}
        
        INSTRUCCIONES:
        1. Analiza el texto del usuario y detecta:
           - Pa√≠s (nombre completo, ej: "Argentina", "Espa√±a", "M√©xico")
           - Ciudad (si se menciona)
           - Categor√≠a (SOLO una de las disponibles)
           - Tipo de intenci√≥n
           - Nivel de confianza
        
        2. REGLAS CR√çTICAS:
           - Si mencionan "restaurant", "discoteca", "bar" ‚Üí categor√≠a "Fiestas"
           - Si mencionan "concierto", "m√∫sica", "show" ‚Üí categor√≠a "M√∫sica"
           - Si mencionan "f√∫tbol", "deportes" ‚Üí categor√≠a "Deportes"
           - Si mencionan "teatro", "arte", "cultura" ‚Üí categor√≠a "Cultural"
           - Si mencionan "tecnolog√≠a", "hackathon", "conferencia" ‚Üí categor√≠a "Tech"
           - Si es ambiguo ‚Üí categor√≠a "Todos"
        
        3. Para PA√çSES, detecta din√°micamente (no limitado):
           - "Buenos Aires" ‚Üí pa√≠s "Argentina"
           - "Palermo" ‚Üí ciudad "Buenos Aires", pa√≠s "Argentina"
           - "Madrid" ‚Üí ciudad "Madrid", pa√≠s "Espa√±a"
           - "Italia" ‚Üí pa√≠s "Italia"
           - "Par√≠s" ‚Üí ciudad "Par√≠s", pa√≠s "Francia"
        
        RESPONDE SIEMPRE EN ESTE FORMATO JSON EXACTO:
        {{
            "country": "Nombre del pa√≠s detectado o null",
            "city": "Nombre de la ciudad detectada o null", 
            "category": "Una de las categor√≠as exactas disponibles o Todos",
            "intent_type": "location/category/mixed/venue/artist",
            "confidence": 0.95,
            "keywords": ["palabra1", "palabra2"],
            "reasoning": "Por qu√© elegiste esa categor√≠a"
        }}
        """
    
    def parse_user_input(self, user_input: str) -> UserIntent:
        """
        Parsea el input del usuario y extrae la intenci√≥n - CON GEMINI AI
        """
        user_input_clean = user_input.lower().strip()
        
        # üß† PRIMERA OPCI√ìN: Usar Gemini AI si est√° disponible
        if self.model:
            try:
                full_prompt = f"{self.intent_prompt}\n\nTEXTO DEL USUARIO: '{user_input}'"
                response = self.model.generate_content(full_prompt)
                gemini_result = self._parse_gemini_response(response.text)
                
                # Crear UserIntent desde respuesta de Gemini
                intent_type_map = {
                    'location': IntentType.LOCATION_SEARCH,
                    'category': IntentType.CATEGORY_SEARCH,
                    'mixed': IntentType.MIXED_SEARCH,
                    'venue': IntentType.VENUE_SEARCH,
                    'artist': IntentType.ARTIST_SEARCH
                }
                
                intent_type = intent_type_map.get(gemini_result.get('intent_type', 'mixed').lower(), IntentType.MIXED_SEARCH)
                
                return UserIntent(
                    intent_type=intent_type,
                    country=gemini_result.get('country'),
                    city=gemini_result.get('city'),
                    location=gemini_result.get('city') or gemini_result.get('country'),
                    category=gemini_result.get('category', 'Todos'),
                    keywords=gemini_result.get('keywords', []),
                    confidence=float(gemini_result.get('confidence', 0.8))
                )
                
            except Exception as e:
                logger.warning(f"Gemini fall√≥, usando m√©todo original: {e}")
        
        # üîÑ FALLBACK: M√©todo original si Gemini no funciona
        intent = UserIntent(
            intent_type=IntentType.MIXED_SEARCH,
            keywords=[]
        )
        
        # 1. Detectar ubicaci√≥n (m√©todo original)
        location_data = self._extract_location(user_input_clean)
        if location_data:
            intent.location = location_data.get('location')
            intent.country = location_data.get('country')
            intent.city = location_data.get('city')
            intent.neighborhood = location_data.get('neighborhood')
            if any([intent.city, intent.country]):
                intent.intent_type = IntentType.LOCATION_SEARCH
        
        # 2. Detectar categor√≠a (m√©todo original)
        category_data = self._extract_category(user_input_clean)
        if category_data:
            intent.category = category_data['category']
            intent.subcategory = category_data.get('subcategory')
            if intent.intent_type == IntentType.LOCATION_SEARCH:
                intent.intent_type = IntentType.MIXED_SEARCH
            else:
                intent.intent_type = IntentType.CATEGORY_SEARCH
        
        # 3. Detectar venue (m√©todo original)
        venue = self._extract_venue(user_input_clean)
        if venue:
            intent.venue = venue
            intent.intent_type = IntentType.VENUE_SEARCH
        
        # 4. Detectar rango temporal (m√©todo original)
        date_range = self._extract_date_range(user_input_clean)
        if date_range:
            intent.date_range = date_range
        
        # 5. Extraer keywords (m√©todo original)
        intent.keywords = self._extract_keywords(user_input_clean)
        
        # 6. Calcular confianza (m√©todo original)
        intent.confidence = self._calculate_confidence(intent)
        
        logger.info(f"Intent parsed: {intent.intent_type.value} - Location: {intent.city or intent.country} - Category: {intent.category}")
        
        return intent
    
    def _extract_location(self, text: str) -> Optional[Dict[str, str]]:
        """
        Extrae informaci√≥n de ubicaci√≥n del texto (M√âTODO ORIGINAL)
        """
        for location, data in self.location_mappings.items():
            if location in text:
                result = data.copy()
                result['location'] = location
                return result
        return None
    
    def _extract_category(self, text: str) -> Optional[Dict[str, str]]:
        """
        Extrae categor√≠a del texto (M√âTODO ORIGINAL)
        """
        for category, variations in self.category_mappings.items():
            if category in text:
                return {'category': category}
            for variation in variations:
                if variation in text:
                    return {'category': category, 'subcategory': variation}
        return None
    
    def _extract_venue(self, text: str) -> Optional[str]:
        """
        Extrae venue del texto (M√âTODO ORIGINAL)
        """
        for venue_key, venue_name in self.known_venues.items():
            if venue_key in text:
                return venue_name
        return None
    
    def _extract_date_range(self, text: str) -> Optional[Tuple[datetime, datetime]]:
        """
        Extrae rango de fechas del texto (M√âTODO ORIGINAL)
        """
        now = datetime.now()
        
        for keyword, value in self.temporal_keywords.items():
            if keyword in text:
                if isinstance(value, int):
                    # D√≠as espec√≠ficos
                    start = now + timedelta(days=value)
                    end = start + timedelta(days=1)
                    return (start, end)
                elif value == 'weekend':
                    # Pr√≥ximo fin de semana
                    days_to_saturday = (5 - now.weekday()) % 7
                    if days_to_saturday == 0:
                        days_to_saturday = 7
                    start = now + timedelta(days=days_to_saturday)
                    end = start + timedelta(days=2)
                    return (start, end)
                elif value == 'week':
                    # Esta semana
                    return (now, now + timedelta(days=7))
                elif value == 'month':
                    # Este mes
                    return (now, now + timedelta(days=30))
                elif value == 'next_month':
                    # Pr√≥ximo mes
                    return (now + timedelta(days=30), now + timedelta(days=60))
        
        return None
    
    def _extract_keywords(self, text: str) -> List[str]:
        """
        Extrae palabras clave relevantes (M√âTODO ORIGINAL)
        """
        # Remover palabras comunes
        stopwords = ['el', 'la', 'de', 'en', 'y', 'a', 'para', 'por', 'con', 'un', 'una', 
                     'los', 'las', 'del', 'al', 'es', 'son', 'the', 'in', 'at', 'on', 'for']
        
        words = text.split()
        keywords = []
        
        for word in words:
            if len(word) > 2 and word not in stopwords:
                # No agregar si ya fue identificado como ubicaci√≥n o categor√≠a
                is_location = any(word in loc for loc in self.location_mappings.keys())
                is_category = any(word in cat for cats in self.category_mappings.values() for cat in cats)
                
                if not is_location and not is_category:
                    keywords.append(word)
        
        return keywords[:5]  # L√≠mite de keywords
    
    def _calculate_confidence(self, intent: UserIntent) -> float:
        """
        Calcula la confianza de la intenci√≥n detectada (M√âTODO ORIGINAL)
        """
        confidence = 0.0
        
        # Ubicaci√≥n detectada
        if intent.city:
            confidence += 0.3
        elif intent.country:
            confidence += 0.2
        
        # Categor√≠a detectada
        if intent.category:
            confidence += 0.3
        
        # Venue detectado
        if intent.venue:
            confidence += 0.2
        
        # Fechas detectadas
        if intent.date_range:
            confidence += 0.1
        
        # Keywords detectados
        if intent.keywords:
            confidence += 0.1
        
        return min(confidence, 1.0)
    
    def _parse_gemini_response(self, response_text: str) -> Dict[str, Any]:
        """
        Parsea la respuesta JSON de Gemini
        """
        try:
            # Limpiar response si tiene markdown
            if "```json" in response_text:
                json_str = response_text.split("```json")[1].split("```")[0]
            elif "```" in response_text:
                json_str = response_text.split("```")[1]
            else:
                json_str = response_text
            
            return json.loads(json_str.strip())
        except Exception as e:
            logger.error(f"‚ùå Error parseando JSON de Gemini: {e}")
            # Fallback
            return {
                "country": None,
                "city": None,
                "category": "Todos",
                "intent_type": "mixed",
                "confidence": 0.3,
                "keywords": [],
                "reasoning": "Error al parsear respuesta"
            }
    
    def _convert_to_user_intent(self, gemini_result: Dict, original_input: str) -> UserIntent:
        """
        Convierte la respuesta de Gemini a UserIntent
        """
        # Determinar tipo de intenci√≥n
        intent_type_map = {
            'location': IntentType.LOCATION_SEARCH,
            'category': IntentType.CATEGORY_SEARCH,
            'mixed': IntentType.MIXED_SEARCH,
            'venue': IntentType.VENUE_SEARCH,
            'artist': IntentType.ARTIST_SEARCH
        }
        
        intent_type = intent_type_map.get(
            gemini_result.get('intent_type', 'mixed').lower(),
            IntentType.MIXED_SEARCH
        )
        
        return UserIntent(
            intent_type=intent_type,
            country=gemini_result.get('country'),
            city=gemini_result.get('city'),
            location=gemini_result.get('city') or gemini_result.get('country'),
            category=gemini_result.get('category', 'Todos'),
            keywords=gemini_result.get('keywords', []),
            confidence=float(gemini_result.get('confidence', 0.8))
        )
    
    def _fallback_parse(self, user_input: str) -> UserIntent:
        """
        Sistema fallback cuando Gemini no est√° disponible
        """
        user_lower = user_input.lower()
        
        # Detectar categor√≠a simple
        category = "Todos"
        if any(word in user_lower for word in ['m√∫sica', 'concierto', 'show', 'cantar']):
            category = "M√∫sica"
        elif any(word in user_lower for word in ['deporte', 'f√∫tbol', 'basket', 'tenis']):
            category = "Deportes"
        elif any(word in user_lower for word in ['restaurant', 'bar', 'discoteca', 'fiesta', 'party']):
            category = "Fiestas"
        elif any(word in user_lower for word in ['teatro', 'arte', 'cultura', 'museo']):
            category = "Cultural"
        elif any(word in user_lower for word in ['tech', 'tecnolog√≠a', 'conferencia', 'startup']):
            category = "Tech"
        
        # Detectar ubicaci√≥n simple
        country = None
        city = None
        if 'argentina' in user_lower or 'buenos aires' in user_lower:
            country = "Argentina"
            if 'buenos aires' in user_lower:
                city = "Buenos Aires"
        elif 'espa√±a' in user_lower or 'madrid' in user_lower:
            country = "Espa√±a"
            if 'madrid' in user_lower:
                city = "Madrid"
        elif 'm√©xico' in user_lower or 'mexico' in user_lower:
            country = "M√©xico"
        elif 'italia' in user_lower:
            country = "Italia"
        elif 'francia' in user_lower or 'par√≠s' in user_lower:
            country = "Francia"
            if 'par√≠s' in user_lower:
                city = "Par√≠s"
        
        return UserIntent(
            intent_type=IntentType.MIXED_SEARCH,
            country=country,
            city=city,
            location=city or country,
            category=category,
            keywords=user_input.split()[:3],
            confidence=0.6
        )
    
    def format_for_eventbrite(self, intent: UserIntent) -> Dict[str, Any]:
        """
        Formatea par√°metros para Eventbrite API
        """
        params = {}
        
        # Eventbrite necesita una ubicaci√≥n como string
        if intent.city:
            params['location'] = intent.city
            if intent.country:
                params['location'] += f", {intent.country}"
        elif intent.country:
            params['location'] = intent.country
        elif intent.neighborhood and intent.city:
            params['location'] = f"{intent.neighborhood}, Buenos Aires"
        else:
            params['location'] = "Buenos Aires"  # Default
        
        # Categor√≠a
        if intent.category:
            params['categories'] = self._map_to_eventbrite_category(intent.category)
        
        # Fechas
        if intent.date_range:
            params['start_date.range_start'] = intent.date_range[0].isoformat()
            params['start_date.range_end'] = intent.date_range[1].isoformat()
        
        # Keywords
        if intent.keywords:
            params['q'] = ' '.join(intent.keywords)
        
        return params
    
    def format_for_ticketmaster(self, intent: UserIntent) -> Dict[str, Any]:
        """
        Formatea par√°metros para Ticketmaster API
        """
        params = {}
        
        # Ticketmaster necesita ciudad y c√≥digo de pa√≠s
        if intent.city:
            params['city'] = intent.city
        
        if intent.country:
            country_code = self._get_country_code(intent.country)
            if country_code:
                params['countryCode'] = country_code
        
        # Categor√≠a (segment en Ticketmaster)
        if intent.category:
            params['segmentName'] = self._map_to_ticketmaster_segment(intent.category)
        
        # Venue
        if intent.venue:
            params['keyword'] = intent.venue
        elif intent.keywords:
            params['keyword'] = ' '.join(intent.keywords)
        
        # Fechas
        if intent.date_range:
            params['startDateTime'] = intent.date_range[0].strftime('%Y-%m-%dT%H:%M:%SZ')
            params['endDateTime'] = intent.date_range[1].strftime('%Y-%m-%dT%H:%M:%SZ')
        
        params['radius'] = str(intent.radius_km)
        params['unit'] = 'km'
        
        return params
    
    def format_for_facebook_scraper(self, intent: UserIntent) -> Dict[str, Any]:
        """
        Formatea par√°metros para Facebook Events scraper
        """
        params = {}
        
        # Facebook necesita una query de b√∫squeda
        search_terms = []
        
        if intent.city:
            search_terms.append(intent.city)
        elif intent.country:
            search_terms.append(intent.country)
        
        if intent.category:
            search_terms.append(intent.category)
        
        if intent.keywords:
            search_terms.extend(intent.keywords)
        
        params['search_query'] = ' '.join(search_terms) if search_terms else 'Buenos Aires'
        params['location'] = intent.city or intent.country or 'Buenos Aires'
        
        return params
    
    def format_for_instagram_scraper(self, intent: UserIntent) -> Dict[str, Any]:
        """
        Formatea par√°metros para Instagram scraper
        """
        params = {}
        
        # Instagram usa hashtags
        hashtags = []
        
        # Hashtag de ubicaci√≥n
        if intent.city:
            city_tag = intent.city.replace(' ', '').replace('-', '')
            hashtags.append(city_tag.lower())
        
        # Hashtag de categor√≠a
        if intent.category:
            if intent.category == 'electronica':
                hashtags.extend(['techno', 'house', 'rave'])
            elif intent.category == 'rock':
                hashtags.extend(['rock', 'indie', 'livemusic'])
            elif intent.category == 'fiesta':
                hashtags.extend(['party', 'nightlife', 'fiesta'])
            else:
                hashtags.append(intent.category)
        
        # Keywords como hashtags
        if intent.keywords:
            hashtags.extend([k.replace(' ', '') for k in intent.keywords])
        
        params['hashtags'] = hashtags[:5]  # L√≠mite de hashtags
        
        if intent.venue:
            params['location_tag'] = intent.venue
        
        return params
    
    def format_for_ticketek(self, intent: UserIntent) -> Dict[str, Any]:
        """
        Formatea par√°metros para Ticketek scraper
        """
        params = {}
        
        # Ticketek usa categor√≠as espec√≠ficas
        category_map = {
            'musica': '/musica',
            'deportes': '/deportes',
            'teatro': '/teatro',
            'familiar': '/familiar',
            'especiales': '/especiales'
        }
        
        if intent.category and intent.category in category_map:
            params['category'] = category_map[intent.category]
        else:
            params['category'] = '/musica'  # Default
        
        # Ubicaci√≥n para filtrado posterior
        params['location'] = intent.city or intent.country or 'Argentina'
        
        return params
    
    def get_all_api_parameters(self, user_input: str) -> Dict[str, Dict[str, Any]]:
        """
        Obtiene par√°metros formateados para todas las APIs disponibles - CON GEMINI AI
        """
        intent = self.parse_user_input(user_input)
        
        return {
            'intent': {
                'type': intent.intent_type.value,
                'confidence': intent.confidence,
                'location': intent.location,
                'country': intent.country,
                'city': intent.city,
                'category': intent.category,
                'keywords': intent.keywords
            },
            'apis': {
                'eventbrite': self.format_for_eventbrite(intent),
                'ticketmaster': self.format_for_ticketmaster(intent),
                'facebook': self.format_for_facebook_scraper(intent),
                'instagram': self.format_for_instagram_scraper(intent),
                'ticketek': self.format_for_ticketek(intent)
            }
        }
    
    def _get_country_code(self, country: str) -> Optional[str]:
        """
        Obtiene el c√≥digo ISO del pa√≠s din√°micamente
        """
        country_codes = {
            'Argentina': 'AR',
            'M√©xico': 'MX', 
            'Brasil': 'BR',
            'Chile': 'CL',
            'Colombia': 'CO',
            'Espa√±a': 'ES',
            'Francia': 'FR',
            'Italia': 'IT',
            'Estados Unidos': 'US',
            'Reino Unido': 'GB',
            'Alemania': 'DE',
            'Per√∫': 'PE',
            'Uruguay': 'UY'
        }
        return country_codes.get(country, 'AR')  # Argentina por default
    
    def _map_to_eventbrite_category(self, category: str) -> str:
        """
        Mapea categor√≠a frontend a formato Eventbrite
        """
        category_map = {
            'M√∫sica': '103',
            'Deportes': '108', 
            'Cultural': '105',
            'Tech': '102',
            'Fiestas': '103'  # Music para fiestas tambi√©n
        }
        return category_map.get(category, '103')
    
    def _map_to_ticketmaster_segment(self, category: str) -> str:
        """
        Mapea categor√≠a frontend a segmento Ticketmaster
        """
        segment_map = {
            'M√∫sica': 'Music',
            'Deportes': 'Sports',
            'Cultural': 'Arts & Theatre', 
            'Tech': 'Miscellaneous',
            'Fiestas': 'Music'
        }
        return segment_map.get(category, 'Music')


# Testing con Gemini AI
if __name__ == "__main__":
    import asyncio
    
    async def test_intent_service():
        service = IntentRecognitionService()
        
        # Casos de prueba para el nuevo sistema
        test_cases = [
            "restaurant en Italia",
            "discoteca en √Åmsterdam", 
            "concierto de rock en Buenos Aires",
            "eventos deportivos en Madrid",
            "teatro en Par√≠s",
            "conferencia tech en Barcelona",
            "fiesta en Palermo",
            "m√∫sica en M√©xico"
        ]
        
        for test in test_cases:
            print(f"\nüß† Testing: '{test}'")
            result = await service.get_all_api_parameters(test)
            print(f"   Intent: {result['intent']['type']} (confidence: {result['intent']['confidence']:.2f})")
            print(f"   Country: {result['intent']['country']}")
            print(f"   City: {result['intent']['city']}")
            print(f"   Category: {result['intent']['category']}")
            print(f"   Keywords: {result['intent']['keywords']}")
    
    # Ejecutar tests
    asyncio.run(test_intent_service())